generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StepType {
  action
  trigger
}

enum Status {
  incomplete
  completed
}

enum ExecutionStatus {
  success
  failure
}

// no user model we are using clerk
// right we might use clerk webhooks later but not now
// and orgs as well
// just for learning purpose

model Flow {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  name      String
  active    Boolean     @default(false) @map("acive")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @updatedAt @map("updated_at")
  steps     Step[]
  Execution Execution[]

  @@map("flows")
}

model Step {
  id             String          @id @default(uuid())
  flowId         String          @map("flow_id")
  type           StepType        @default(action)
  status         Status          @default(incomplete)
  position       Int             @default(autoincrement())
  parameters     Json?
  connectionId   String?         @map("connection_id")
  webhookPath    String?         @map("webhook_path")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at")
  flow           Flow            @relation(fields: [flowId], references: [id])
  connection     Connection?     @relation(fields: [connectionId], references: [id])
  executionSteps ExecutionStep[]
  PollSchedule   PollSchedule?

  @@map("steps")
}

enum ConnectionType {
  github
  slack
}

model Connection {
  id        String         @id @default(uuid())
  userId    String         @map("user_id")
  type      ConnectionType
  name      String
  config    Json
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")
  steps     Step[]

  @@map("connections")
}

model ExecutionStep {
  id           String    @id @default(uuid())
  executionId  String    @map("execution_id")
  stepId       String    @map("step_id")
  dataIn       Json?
  dataOut      Json?
  status       String?
  errorDetails Json?
  deletedAt    DateTime? @map("deleted_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  step         Step      @relation(fields: [stepId], references: [id])
  Execution    Execution @relation(fields: [executionId], references: [id])

  @@map("execution_steps")
}

model Execution {
  id             String          @id @default(uuid())
  flowId         String          @map("flow_id")
  status         ExecutionStatus @default(success)
  startedAt      DateTime        @default(now()) @map("started_at")
  completedAt    DateTime?       @map("completed_at")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at")
  flow           Flow            @relation(fields: [flowId], references: [id])
  executionSteps ExecutionStep[]

  @@map("executions")
}

model Credential {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  name      String
  type      String
  details   Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("credentials")
}

model PollSchedule {
  id        String   @id @default(uuid())
  stepId    String   @unique @map("step_id")
  interval  Int
  lastPoll  DateTime @default(now()) @map("last_poll")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  step      Step     @relation(fields: [stepId], references: [id])

  @@map("poll_schedules")
}
